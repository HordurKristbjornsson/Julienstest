/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bw1XRvvtRawYwtZXSCfw3q
// Component: q7VMf-wKrllj
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/projectcss
import sty from "./PlasmicNewsCard.module.css"; // plasmic-import: q7VMf-wKrllj/css
import Line4Icon from "./icons/PlasmicIcon__Line4"; // plasmic-import: 7U6HRPTFhngK/icon
import Line5Icon from "./icons/PlasmicIcon__Line5"; // plasmic-import: okZ5q2QIJpYU/icon

createPlasmicElementProxy;

export const PlasmicNewsCard__VariantProps = new Array();

export const PlasmicNewsCard__ArgProps = new Array(
  "logo",
  "date",
  "headline",
  "img",
  "bodyText"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNewsCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"frame10737"}
      data-plasmic-override={overrides.frame10737}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.frame10737
      )}
    >
      <div
        data-plasmic-name={"frame63237"}
        data-plasmic-override={overrides.frame63237}
        className={classNames(projectcss.all, sty.frame63237)}
      >
        <div
          data-plasmic-name={"frame10814"}
          data-plasmic-override={overrides.frame10814}
          className={classNames(projectcss.all, sty.frame10814)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(projectcss.all, sty.freeBox__ijN4L)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__acpCd
                  )}
                >
                  {"The New Yorker"}
                </div>
              </React.Fragment>
            ),

            value: args.logo
          })}
        </div>
        <div
          data-plasmic-name={"frame63238"}
          data-plasmic-override={overrides.frame63238}
          className={classNames(projectcss.all, sty.frame63238)}
        >
          <Line4Icon
            className={classNames(projectcss.all, sty.svg__vdl8H)}
            role={"img"}
          />

          <div
            data-plasmic-name={"frame63239"}
            data-plasmic-override={overrides.frame63239}
            className={classNames(projectcss.all, sty.frame63239)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__lVkD6)}>
              {renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fQx34
                    )}
                  >
                    {"October 31, 2024"}
                  </div>
                ),

                value: args.date,
                className: classNames(sty.slotTargetDate)
              })}
            </div>
          </div>
          <Line4Icon
            className={classNames(projectcss.all, sty.svg__mjJye)}
            role={"img"}
          />
        </div>
        <div
          data-plasmic-name={"frame10981"}
          data-plasmic-override={overrides.frame10981}
          className={classNames(projectcss.all, sty.frame10981)}
        >
          <div
            data-plasmic-name={"headline4"}
            data-plasmic-override={overrides.headline4}
            className={classNames(projectcss.all, sty.headline4)}
          >
            {renderPlasmicSlot({
              defaultContents:
                "The Place to Buy Kurt Cobain\u2019s Sweater and Truman Capote\u2019s Ashes",
              value: args.headline,
              className: classNames(sty.slotTargetHeadline)
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__a65Fv)}>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(projectcss.all, sty.freeBox__g8Wht)}
                />
              ),

              value: args.img
            })}
          </div>
        </div>
        <div
          data-plasmic-name={"frame63240"}
          data-plasmic-override={overrides.frame63240}
          className={classNames(projectcss.all, sty.frame63240)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__tl3Da)}>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iOk5B
                  )}
                >
                  {
                    "\u201cAs the art market cools, Julien\u2019s Auctions earns millions selling celebrity ephemera\u2014and used its connections to help Kim Kardashian borrow Marilyn Monroe\u2019s J.F.K.-birthday dress.\u201d"
                  }
                </div>
              ),

              value: args.bodyText,
              className: classNames(sty.slotTargetBodyText)
            })}
          </div>
        </div>
        {false ? (
          <Line5Icon
            className={classNames(projectcss.all, sty.svg__fvWzc)}
            role={"img"}
          />
        ) : null}
        {false ? (
          <Button
            data-plasmic-name={"button2"}
            data-plasmic-override={overrides.button2}
            className={classNames("__wab_instance", sty.button2)}
          />
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  frame10737: [
    "frame10737",
    "frame63237",
    "frame10814",
    "frame63238",
    "frame63239",
    "frame10981",
    "headline4",
    "frame63240",
    "button2"
  ],

  frame63237: [
    "frame63237",
    "frame10814",
    "frame63238",
    "frame63239",
    "frame10981",
    "headline4",
    "frame63240",
    "button2"
  ],

  frame10814: ["frame10814"],
  frame63238: ["frame63238", "frame63239"],
  frame63239: ["frame63239"],
  frame10981: ["frame10981", "headline4"],
  headline4: ["headline4"],
  frame63240: ["frame63240"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNewsCard__ArgProps,
          internalVariantPropNames: PlasmicNewsCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNewsCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "frame10737") {
    func.displayName = "PlasmicNewsCard";
  } else {
    func.displayName = `PlasmicNewsCard.${nodeName}`;
  }
  return func;
}

export const PlasmicNewsCard = Object.assign(
  // Top-level PlasmicNewsCard renders the root element
  makeNodeComponent("frame10737"),
  {
    // Helper components rendering sub-elements
    frame63237: makeNodeComponent("frame63237"),
    frame10814: makeNodeComponent("frame10814"),
    frame63238: makeNodeComponent("frame63238"),
    frame63239: makeNodeComponent("frame63239"),
    frame10981: makeNodeComponent("frame10981"),
    headline4: makeNodeComponent("headline4"),
    frame63240: makeNodeComponent("frame63240"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicNewsCard
    internalVariantProps: PlasmicNewsCard__VariantProps,
    internalArgProps: PlasmicNewsCard__ArgProps
  }
);

export default PlasmicNewsCard;
/* prettier-ignore-end */
