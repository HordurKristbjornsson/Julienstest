/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bw1XRvvtRawYwtZXSCfw3q
// Component: FGcO1rOE3sm1
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/projectcss
import sty from "./PlasmicStatusAuctionCard.module.css"; // plasmic-import: FGcO1rOE3sm1/css
import Ellipse3Icon from "./icons/PlasmicIcon__Ellipse3"; // plasmic-import: oiB_zyeijbhp/icon

createPlasmicElementProxy;

export const PlasmicStatusAuctionCard__VariantProps = new Array(
  "later",
  "comingSoon",
  "liveNow"
);

export const PlasmicStatusAuctionCard__ArgProps = new Array("children");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicStatusAuctionCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "later",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.later
      },
      {
        path: "comingSoon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.comingSoon
      },
      {
        path: "liveNow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.liveNow
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"itemAmount"}
      data-plasmic-override={overrides.itemAmount}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.itemAmount,
        {
          [sty.itemAmountcomingSoon]: hasVariant(
            $state,
            "comingSoon",
            "comingSoon"
          ),
          [sty.itemAmountlater]: hasVariant($state, "later", "later"),
          [sty.itemAmountliveNow]: hasVariant($state, "liveNow", "liveNow")
        }
      )}
    >
      <Ellipse3Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg, {
          [sty.svgliveNow]: hasVariant($state, "liveNow", "liveNow")
        })}
        role={"img"}
      />

      {renderPlasmicSlot({
        defaultContents: "Coming soon",
        value: args.children,
        className: classNames(sty.slotTargetChildren, {
          [sty.slotTargetChildrenlater]: hasVariant($state, "later", "later"),
          [sty.slotTargetChildrenliveNow]: hasVariant(
            $state,
            "liveNow",
            "liveNow"
          )
        })
      })}
    </div>
  );
}

const PlasmicDescendants = {
  itemAmount: ["itemAmount", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStatusAuctionCard__ArgProps,
          internalVariantPropNames: PlasmicStatusAuctionCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStatusAuctionCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "itemAmount") {
    func.displayName = "PlasmicStatusAuctionCard";
  } else {
    func.displayName = `PlasmicStatusAuctionCard.${nodeName}`;
  }
  return func;
}

export const PlasmicStatusAuctionCard = Object.assign(
  // Top-level PlasmicStatusAuctionCard renders the root element
  makeNodeComponent("itemAmount"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicStatusAuctionCard
    internalVariantProps: PlasmicStatusAuctionCard__VariantProps,
    internalArgProps: PlasmicStatusAuctionCard__ArgProps
  }
);

export default PlasmicStatusAuctionCard;
/* prettier-ignore-end */
