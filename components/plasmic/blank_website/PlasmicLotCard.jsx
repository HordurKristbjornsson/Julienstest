/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bw1XRvvtRawYwtZXSCfw3q
// Component: DdULJILWqlju
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/projectcss
import sty from "./PlasmicLotCard.module.css"; // plasmic-import: DdULJILWqlju/css
import Ellipse2Icon from "./icons/PlasmicIcon__Ellipse2"; // plasmic-import: XQ5BHnFNOpAb/icon
import Love2Icon from "./icons/PlasmicIcon__Love2"; // plasmic-import: zja-YJaqCUdU/icon
import Divider2Icon from "./icons/PlasmicIcon__Divider2"; // plasmic-import: OB8gPI6oFPng/icon

createPlasmicElementProxy;

export const PlasmicLotCard__VariantProps = new Array();

export const PlasmicLotCard__ArgProps = new Array(
  "lotImage2",
  "name",
  "description",
  "currentBid",
  "estimate"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLotCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"lotCard6"}
      data-plasmic-override={overrides.lotCard6}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.lotCard6
      )}
    >
      <div
        data-plasmic-name={"image2"}
        data-plasmic-override={overrides.image2}
        className={classNames(projectcss.all, sty.image2)}
      >
        <div
          data-plasmic-name={"lotImage"}
          data-plasmic-override={overrides.lotImage}
          className={classNames(projectcss.all, sty.lotImage)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(projectcss.all, sty.freeBox__bzA2T)}
                />

                <div
                  className={classNames(projectcss.all, sty.freeBox__d2ThQ)}
                />
              </React.Fragment>
            ),

            value: args.lotImage2
          })}
        </div>
        <div
          data-plasmic-name={"lotnumberTags6"}
          data-plasmic-override={overrides.lotnumberTags6}
          className={classNames(projectcss.all, sty.lotnumberTags6)}
        >
          <div
            data-plasmic-name={"lotnumberNoreserve6"}
            data-plasmic-override={overrides.lotnumberNoreserve6}
            className={classNames(projectcss.all, sty.lotnumberNoreserve6)}
          >
            <div
              data-plasmic-name={"lotNumber6"}
              data-plasmic-override={overrides.lotNumber6}
              className={classNames(projectcss.all, sty.lotNumber6)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__colV8
                )}
              >
                {"293"}
              </div>
            </div>
            {false ? (
              <div
                data-plasmic-name={"noReserve6"}
                data-plasmic-override={overrides.noReserve6}
                className={classNames(projectcss.all, sty.noReserve6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__cXdyv
                  )}
                >
                  {"No Reserve"}
                </div>
              </div>
            ) : null}
            {false ? (
              <div
                data-plasmic-name={"live6"}
                data-plasmic-override={overrides.live6}
                className={classNames(projectcss.all, sty.live6)}
              >
                <Ellipse2Icon
                  className={classNames(projectcss.all, sty.svg__pN1L)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wl22V
                  )}
                >
                  {"Live"}
                </div>
              </div>
            ) : null}
          </div>
        </div>
        <div
          data-plasmic-name={"love6"}
          data-plasmic-override={overrides.love6}
          className={classNames(projectcss.all, sty.love6)}
        >
          {false ? (
            <div
              data-plasmic-name={"label14"}
              data-plasmic-override={overrides.label14}
              className={classNames(projectcss.all, sty.label14)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jwG7
                )}
              >
                {"LOVE"}
              </div>
            </div>
          ) : null}
          <div
            data-plasmic-name={"icon6"}
            data-plasmic-override={overrides.icon6}
            className={classNames(projectcss.all, sty.icon6)}
          >
            <Love2Icon
              className={classNames(projectcss.all, sty.svg___2O1U)}
              role={"img"}
            />
          </div>
        </div>
        <div
          data-plasmic-name={"bidNow6"}
          data-plasmic-override={overrides.bidNow6}
          className={classNames(projectcss.all, sty.bidNow6)}
        >
          <div
            data-plasmic-name={"text5"}
            data-plasmic-override={overrides.text5}
            className={classNames(projectcss.all, sty.text5)}
          >
            <div
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.button
              )}
            >
              {"Quick Bid"}
            </div>
            <div
              data-plasmic-name={"button4"}
              data-plasmic-override={overrides.button4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.button4
              )}
            >
              {"Quick Bid"}
            </div>
          </div>
        </div>
      </div>
      {false ? (
        <div
          data-plasmic-name={"auctionName3"}
          data-plasmic-override={overrides.auctionName3}
          className={classNames(projectcss.all, sty.auctionName3)}
        >
          <div
            data-plasmic-name={"propertyOf7"}
            data-plasmic-override={overrides.propertyOf7}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.propertyOf7
            )}
          >
            {"FRIENDS | The One With The 30th Anniversary Auction"}
          </div>
          <Divider2Icon
            className={classNames(projectcss.all, sty.svg__t8Ur5)}
            role={"img"}
          />
        </div>
      ) : null}
      <div
        data-plasmic-name={"title69"}
        data-plasmic-override={overrides.title69}
        className={classNames(projectcss.all, sty.title69)}
      >
        <div
          data-plasmic-name={"title70"}
          data-plasmic-override={overrides.title70}
          className={classNames(projectcss.all, sty.title70)}
        >
          {renderPlasmicSlot({
            defaultContents: "Playboy",
            value: args.name,
            className: classNames(sty.slotTargetName)
          })}
        </div>
        <div
          data-plasmic-name={"title71"}
          data-plasmic-override={overrides.title71}
          className={classNames(projectcss.all, sty.title71)}
        >
          {renderPlasmicSlot({
            defaultContents: "Teresa Fasolino Construction Assemblage Artwork",
            value: args.description,
            className: classNames(sty.slotTargetDescription)
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"pricing6"}
        data-plasmic-override={overrides.pricing6}
        className={classNames(projectcss.all, sty.pricing6)}
      >
        <div
          data-plasmic-name={"countdown3"}
          data-plasmic-override={overrides.countdown3}
          className={classNames(projectcss.all, sty.countdown3)}
        >
          <div
            data-plasmic-name={"title72"}
            data-plasmic-override={overrides.title72}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title72
            )}
          >
            {"4 days left"}
          </div>
        </div>
        <div
          data-plasmic-name={"price6"}
          data-plasmic-override={overrides.price6}
          className={classNames(projectcss.all, sty.price6)}
        >
          <div
            data-plasmic-name={"bidType6"}
            data-plasmic-override={overrides.bidType6}
            className={classNames(projectcss.all, sty.bidType6)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ziObA
              )}
            >
              {"Current Bid"}
            </div>
          </div>
          <div
            data-plasmic-name={"frame18"}
            data-plasmic-override={overrides.frame18}
            className={classNames(projectcss.all, sty.frame18)}
          >
            {renderPlasmicSlot({
              defaultContents: "$200",
              value: args.currentBid,
              className: classNames(sty.slotTargetCurrentBid)
            })}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vQk78
              )}
            >
              {"(3 Bids)"}
            </div>
          </div>
        </div>
        <div
          data-plasmic-name={"priceInfo11"}
          data-plasmic-override={overrides.priceInfo11}
          className={classNames(projectcss.all, sty.priceInfo11)}
        >
          <div
            data-plasmic-name={"priceInfo12"}
            data-plasmic-override={overrides.priceInfo12}
            className={classNames(projectcss.all, sty.priceInfo12)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sAmj5
              )}
            >
              {"Estimate"}
            </div>
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___53RC7
                  )}
                >
                  {"$300 - $500"}
                </div>
              ),

              value: args.estimate,
              className: classNames(sty.slotTargetEstimate)
            })}
            {false ? (
              <div
                data-plasmic-name={"reserveStatus11"}
                data-plasmic-override={overrides.reserveStatus11}
                className={classNames(projectcss.all, sty.reserveStatus11)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__usqN7
                  )}
                >
                  {"Reserve met"}
                </div>
              </div>
            ) : null}
          </div>
          {false ? (
            <div
              data-plasmic-name={"reserveStatus12"}
              data-plasmic-override={overrides.reserveStatus12}
              className={classNames(projectcss.all, sty.reserveStatus12)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dpPa
                )}
              >
                {"Reserve not met"}
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  lotCard6: [
    "lotCard6",
    "image2",
    "lotImage",
    "lotnumberTags6",
    "lotnumberNoreserve6",
    "lotNumber6",
    "noReserve6",
    "live6",
    "love6",
    "label14",
    "icon6",
    "bidNow6",
    "text5",
    "button",
    "button4",
    "auctionName3",
    "propertyOf7",
    "title69",
    "title70",
    "title71",
    "pricing6",
    "countdown3",
    "title72",
    "price6",
    "bidType6",
    "frame18",
    "priceInfo11",
    "priceInfo12",
    "reserveStatus11",
    "reserveStatus12"
  ],

  image2: [
    "image2",
    "lotImage",
    "lotnumberTags6",
    "lotnumberNoreserve6",
    "lotNumber6",
    "noReserve6",
    "live6",
    "love6",
    "label14",
    "icon6",
    "bidNow6",
    "text5",
    "button",
    "button4"
  ],

  lotImage: ["lotImage"],
  lotnumberTags6: [
    "lotnumberTags6",
    "lotnumberNoreserve6",
    "lotNumber6",
    "noReserve6",
    "live6"
  ],

  lotnumberNoreserve6: [
    "lotnumberNoreserve6",
    "lotNumber6",
    "noReserve6",
    "live6"
  ],

  lotNumber6: ["lotNumber6"],
  noReserve6: ["noReserve6"],
  live6: ["live6"],
  love6: ["love6", "label14", "icon6"],
  label14: ["label14"],
  icon6: ["icon6"],
  bidNow6: ["bidNow6", "text5", "button", "button4"],
  text5: ["text5", "button", "button4"],
  button: ["button"],
  button4: ["button4"],
  auctionName3: ["auctionName3", "propertyOf7"],
  propertyOf7: ["propertyOf7"],
  title69: ["title69", "title70", "title71"],
  title70: ["title70"],
  title71: ["title71"],
  pricing6: [
    "pricing6",
    "countdown3",
    "title72",
    "price6",
    "bidType6",
    "frame18",
    "priceInfo11",
    "priceInfo12",
    "reserveStatus11",
    "reserveStatus12"
  ],

  countdown3: ["countdown3", "title72"],
  title72: ["title72"],
  price6: ["price6", "bidType6", "frame18"],
  bidType6: ["bidType6"],
  frame18: ["frame18"],
  priceInfo11: [
    "priceInfo11",
    "priceInfo12",
    "reserveStatus11",
    "reserveStatus12"
  ],

  priceInfo12: ["priceInfo12", "reserveStatus11"],
  reserveStatus11: ["reserveStatus11"],
  reserveStatus12: ["reserveStatus12"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLotCard__ArgProps,
          internalVariantPropNames: PlasmicLotCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLotCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "lotCard6") {
    func.displayName = "PlasmicLotCard";
  } else {
    func.displayName = `PlasmicLotCard.${nodeName}`;
  }
  return func;
}

export const PlasmicLotCard = Object.assign(
  // Top-level PlasmicLotCard renders the root element
  makeNodeComponent("lotCard6"),
  {
    // Helper components rendering sub-elements
    image2: makeNodeComponent("image2"),
    lotImage: makeNodeComponent("lotImage"),
    lotnumberTags6: makeNodeComponent("lotnumberTags6"),
    lotnumberNoreserve6: makeNodeComponent("lotnumberNoreserve6"),
    lotNumber6: makeNodeComponent("lotNumber6"),
    noReserve6: makeNodeComponent("noReserve6"),
    live6: makeNodeComponent("live6"),
    love6: makeNodeComponent("love6"),
    label14: makeNodeComponent("label14"),
    icon6: makeNodeComponent("icon6"),
    bidNow6: makeNodeComponent("bidNow6"),
    text5: makeNodeComponent("text5"),
    button: makeNodeComponent("button"),
    button4: makeNodeComponent("button4"),
    auctionName3: makeNodeComponent("auctionName3"),
    propertyOf7: makeNodeComponent("propertyOf7"),
    title69: makeNodeComponent("title69"),
    title70: makeNodeComponent("title70"),
    title71: makeNodeComponent("title71"),
    pricing6: makeNodeComponent("pricing6"),
    countdown3: makeNodeComponent("countdown3"),
    title72: makeNodeComponent("title72"),
    price6: makeNodeComponent("price6"),
    bidType6: makeNodeComponent("bidType6"),
    frame18: makeNodeComponent("frame18"),
    priceInfo11: makeNodeComponent("priceInfo11"),
    priceInfo12: makeNodeComponent("priceInfo12"),
    reserveStatus11: makeNodeComponent("reserveStatus11"),
    reserveStatus12: makeNodeComponent("reserveStatus12"),
    // Metadata about props expected for PlasmicLotCard
    internalVariantProps: PlasmicLotCard__VariantProps,
    internalArgProps: PlasmicLotCard__ArgProps
  }
);

export default PlasmicLotCard;
/* prettier-ignore-end */
