/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bw1XRvvtRawYwtZXSCfw3q
// Component: rCIaETxTvzhO
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/projectcss
import sty from "./PlasmicGigaButtonSecondary.module.css"; // plasmic-import: rCIaETxTvzhO/css

createPlasmicElementProxy;

export const PlasmicGigaButtonSecondary__VariantProps = new Array();

export const PlasmicGigaButtonSecondary__ArgProps = new Array("text");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGigaButtonSecondary__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const styleTokensClassNames = _useStyleTokens();
  return (
    <button
      data-plasmic-name={"gigaButton"}
      data-plasmic-override={overrides.gigaButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.gigaButton
      )}
      ref={ref => {
        $refs["gigaButton"] = ref;
      }}
    >
      <div
        data-plasmic-name={"buttonText"}
        data-plasmic-override={overrides.buttonText}
        className={classNames(projectcss.all, sty.buttonText)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___93Naa
              )}
            >
              {"GO TO AUCTION"}
            </div>
          ),

          value: args.text,
          className: classNames(sty.slotTargetText)
        })}
        {false ? (
          <div
            data-plasmic-name={"button12"}
            data-plasmic-override={overrides.button12}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.button12
            )}
          >
            {"GO TO AUCTION"}
          </div>
        ) : null}
      </div>
    </button>
  );
}

const PlasmicDescendants = {
  gigaButton: ["gigaButton", "buttonText", "button12"],
  buttonText: ["buttonText", "button12"],
  button12: ["button12"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGigaButtonSecondary__ArgProps,
          internalVariantPropNames: PlasmicGigaButtonSecondary__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGigaButtonSecondary__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "gigaButton") {
    func.displayName = "PlasmicGigaButtonSecondary";
  } else {
    func.displayName = `PlasmicGigaButtonSecondary.${nodeName}`;
  }
  return func;
}

export const PlasmicGigaButtonSecondary = Object.assign(
  // Top-level PlasmicGigaButtonSecondary renders the root element
  makeNodeComponent("gigaButton"),
  {
    // Helper components rendering sub-elements
    buttonText: makeNodeComponent("buttonText"),
    button12: makeNodeComponent("button12"),
    // Metadata about props expected for PlasmicGigaButtonSecondary
    internalVariantProps: PlasmicGigaButtonSecondary__VariantProps,
    internalArgProps: PlasmicGigaButtonSecondary__ArgProps
  }
);

export default PlasmicGigaButtonSecondary;
/* prettier-ignore-end */
