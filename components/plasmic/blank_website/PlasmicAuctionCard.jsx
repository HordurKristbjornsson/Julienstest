/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bw1XRvvtRawYwtZXSCfw3q
// Component: kZMJ5azlNu2t
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import StatusAuctionCard from "../../StatusAuctionCard"; // plasmic-import: FGcO1rOE3sm1/component
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: bw1XRvvtRawYwtZXSCfw3q/projectcss
import sty from "./PlasmicAuctionCard.module.css"; // plasmic-import: kZMJ5azlNu2t/css

createPlasmicElementProxy;

export const PlasmicAuctionCard__VariantProps = new Array();

export const PlasmicAuctionCard__ArgProps = new Array(
  "imagePerson3",
  "slot",
  "date",
  "children"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuctionCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"auctionCard"}
      data-plasmic-override={overrides.auctionCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.auctionCard
      )}
    >
      <div
        data-plasmic-name={"frame10240"}
        data-plasmic-override={overrides.frame10240}
        className={classNames(projectcss.all, sty.frame10240)}
      >
        <div
          data-plasmic-name={"imagePerson2"}
          data-plasmic-override={overrides.imagePerson2}
          className={classNames(projectcss.all, sty.imagePerson2)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(projectcss.all, sty.freeBox___0U66K)}>
                <div className={classNames(projectcss.all, sty.freeBox__ke1Ru)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__goQmE)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wv7X4
                      )}
                    >
                      {"enter auction"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d72YH
                    )}
                  >
                    {"enter auction"}
                  </div>
                </div>
              </div>
            ),

            value: args.imagePerson3
          })}
        </div>
      </div>
      <div
        data-plasmic-name={"frame63301"}
        data-plasmic-override={overrides.frame63301}
        className={classNames(projectcss.all, sty.frame63301)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <StatusAuctionCard
              className={classNames(
                "__wab_instance",
                sty.statusAuctionCard__f1LB
              )}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fkPg8
                )}
              >
                {"Coming soon"}
              </div>
            </StatusAuctionCard>
          ),

          value: args.slot
        })}
        <div
          data-plasmic-name={"itemAmount2"}
          data-plasmic-override={overrides.itemAmount2}
          className={classNames(projectcss.all, sty.itemAmount2)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Online only"}
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"frame63168"}
        data-plasmic-override={overrides.frame63168}
        className={classNames(projectcss.all, sty.frame63168)}
      >
        <div
          data-plasmic-name={"frame63179"}
          data-plasmic-override={overrides.frame63179}
          className={classNames(projectcss.all, sty.frame63179)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gqOnS
                )}
              >
                {"Aug 13 - Sept 9, 2025"}
              </div>
            ),

            value: args.date,
            className: classNames(sty.slotTargetDate)
          })}
        </div>
        <div
          data-plasmic-name={"frame11007"}
          data-plasmic-override={overrides.frame11007}
          className={classNames(projectcss.all, sty.frame11007)}
        >
          <div
            data-plasmic-name={"auctionTitle"}
            data-plasmic-override={overrides.auctionTitle}
            className={classNames(projectcss.all, sty.auctionTitle)}
          >
            {renderPlasmicSlot({
              defaultContents:
                "Thomas And Friends\nThe britt allcroft collection",
              value: args.children,
              className: classNames(sty.slotTargetChildren)
            })}
          </div>
        </div>
        {false ? (
          <div
            data-plasmic-name={"frame63178"}
            data-plasmic-override={overrides.frame63178}
            className={classNames(projectcss.all, sty.frame63178)}
          >
            <div
              data-plasmic-name={"title5"}
              data-plasmic-override={overrides.title5}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.title5
              )}
            >
              {"ending now!"}
            </div>
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  auctionCard: [
    "auctionCard",
    "frame10240",
    "imagePerson2",
    "frame63301",
    "itemAmount2",
    "text",
    "frame63168",
    "frame63179",
    "frame11007",
    "auctionTitle",
    "frame63178",
    "title5"
  ],

  frame10240: ["frame10240", "imagePerson2"],
  imagePerson2: ["imagePerson2"],
  frame63301: ["frame63301", "itemAmount2", "text"],
  itemAmount2: ["itemAmount2", "text"],
  text: ["text"],
  frame63168: [
    "frame63168",
    "frame63179",
    "frame11007",
    "auctionTitle",
    "frame63178",
    "title5"
  ],

  frame63179: ["frame63179"],
  frame11007: ["frame11007", "auctionTitle"],
  auctionTitle: ["auctionTitle"],
  frame63178: ["frame63178", "title5"],
  title5: ["title5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuctionCard__ArgProps,
          internalVariantPropNames: PlasmicAuctionCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuctionCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "auctionCard") {
    func.displayName = "PlasmicAuctionCard";
  } else {
    func.displayName = `PlasmicAuctionCard.${nodeName}`;
  }
  return func;
}

export const PlasmicAuctionCard = Object.assign(
  // Top-level PlasmicAuctionCard renders the root element
  makeNodeComponent("auctionCard"),
  {
    // Helper components rendering sub-elements
    frame10240: makeNodeComponent("frame10240"),
    imagePerson2: makeNodeComponent("imagePerson2"),
    frame63301: makeNodeComponent("frame63301"),
    itemAmount2: makeNodeComponent("itemAmount2"),
    text: makeNodeComponent("text"),
    frame63168: makeNodeComponent("frame63168"),
    frame63179: makeNodeComponent("frame63179"),
    frame11007: makeNodeComponent("frame11007"),
    auctionTitle: makeNodeComponent("auctionTitle"),
    frame63178: makeNodeComponent("frame63178"),
    title5: makeNodeComponent("title5"),
    // Metadata about props expected for PlasmicAuctionCard
    internalVariantProps: PlasmicAuctionCard__VariantProps,
    internalArgProps: PlasmicAuctionCard__ArgProps
  }
);

export default PlasmicAuctionCard;
/* prettier-ignore-end */
